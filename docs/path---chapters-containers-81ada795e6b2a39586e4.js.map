{"version":3,"sources":["webpack:///path---chapters-containers-81ada795e6b2a39586e4.js","webpack:///./.cache/json/chapters-containers.json"],"names":["webpackJsonp","334","module","exports","data","markdownRemark","html","frontmatter","date","path","title","pathContext"],"mappings":"AAAAA,cAAc,gBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,gqUAA4/TC,aAA6hBC,KAAA,iBAAAC,KAAA,uBAAAC,MAAA,gBAA6EC","file":"path---chapters-containers-81ada795e6b2a39586e4.js","sourcesContent":["webpackJsonp([1166681777080],{\n\n/***/ 334:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Containers</h1>\\n<p>Now that we have got our main view and we can pass it a list of articles, we need to build some business logic to retrieve our articles. To do this we use a container component. The reason for this is, it is a good practice to keep your representation logic separate from your business logic. Our container will eventially house the logic to retrieve all the articles.</p>\\n<h1>Containers &#x26; Class Components</h1>\\n<p>Before we try defining our container, lets look at another way to define a react component. So far we have been defining our components as simple functions. There are actually a few different methods for defining them. Another way is by creating a class that extends <code class=\\\"language-text\\\">React.Component</code>. For our hackernews app there are three methods of <code class=\\\"language-text\\\">React.Component</code> we will need to make use of in our container.</p>\\n<h3>React.Component#render()</h3>\\n<p>When extending <code class=\\\"language-text\\\">React.Component</code> the only required method to define is <em>render</em>. This should return\\na react element.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//</span>\\n<span class=\\\"token comment\\\">// Usage:</span>\\n<span class=\\\"token comment\\\">//   &lt;Message</span>\\n<span class=\\\"token comment\\\">//      text=\\\"Hello World!\\\"</span>\\n<span class=\\\"token comment\\\">//   /></span>\\n<span class=\\\"token comment\\\">//</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Message</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// notice that props isnt an argument to render. but it</span>\\n    <span class=\\\"token comment\\\">// will exist on the instance's `this` reference</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>text<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3>React.Component#componentWillMount()</h3>\\n<p>While the <code class=\\\"language-text\\\">render</code> is the only method necessary to define, React.Component has some other life cycle methods we can define. An example is there is a method called componentWillMount, which is called when the component is about to be added to the screen. To use the hackernews app as an example, we can use this to fetch new articles when a component is added to the screen.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Message</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token comment\\\">// will execute when first added to screen</span>\\n  <span class=\\\"token function\\\">componentWillMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'hello world!'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>text<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3>React.Component#setState()</h3>\\n<p>When called, setState will take the current value of <code class=\\\"language-text\\\">this.state</code> (which will be the data store for our view), and merge it with the object you pass it, then will also re-render the component again with the new values.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Message</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token comment\\\">// lets set the initial value of `this.state`</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> text<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">''</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// sets `this.state.text` to Hello World after 3 seconds.</span>\\n  <span class=\\\"token function\\\">componentWillMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> text<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Hello World!\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// we are using state here to set `text`!!</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>text<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>The combination of these methods will be the basis for our container.</p>\\n<h2>Exercise</h2>\\n<p>The last example of message is largely similar to what the container for our hackernews app should look like. For the excercise:</p>\\n<ul>\\n<li>in <code class=\\\"language-text\\\">source/index.jsx</code> create our container class extending <code class=\\\"language-text\\\">React.Component</code>.</li>\\n<li>it should have an initial state of <code class=\\\"language-text\\\">{ articles: [] }</code></li>\\n<li>when the component mounts, it should fetch articles from hackernews***.</li>\\n<li>finally it will re-render our <code class=\\\"language-text\\\">NewsFeed</code> view with the articles currently\\nin the containers state (automatically when setState is called).</li>\\n</ul>\\n<p>*** to make this easier lets not worry about fetching our articles from the api just yet. Lets just use setTimeout to set <code class=\\\"language-text\\\">this.state.articles</code> to the mocked articles array we are already using.</p>\",\"frontmatter\":{\"date\":\"March 22, 2018\",\"path\":\"/chapters/containers\",\"title\":\"Containers\"}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---chapters-containers-81ada795e6b2a39586e4.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Containers</h1>\\n<p>Now that we have got our main view and we can pass it a list of articles, we need to build some business logic to retrieve our articles. To do this we use a container component. The reason for this is, it is a good practice to keep your representation logic separate from your business logic. Our container will eventially house the logic to retrieve all the articles.</p>\\n<h1>Containers &#x26; Class Components</h1>\\n<p>Before we try defining our container, lets look at another way to define a react component. So far we have been defining our components as simple functions. There are actually a few different methods for defining them. Another way is by creating a class that extends <code class=\\\"language-text\\\">React.Component</code>. For our hackernews app there are three methods of <code class=\\\"language-text\\\">React.Component</code> we will need to make use of in our container.</p>\\n<h3>React.Component#render()</h3>\\n<p>When extending <code class=\\\"language-text\\\">React.Component</code> the only required method to define is <em>render</em>. This should return\\na react element.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//</span>\\n<span class=\\\"token comment\\\">// Usage:</span>\\n<span class=\\\"token comment\\\">//   &lt;Message</span>\\n<span class=\\\"token comment\\\">//      text=\\\"Hello World!\\\"</span>\\n<span class=\\\"token comment\\\">//   /></span>\\n<span class=\\\"token comment\\\">//</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Message</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// notice that props isnt an argument to render. but it</span>\\n    <span class=\\\"token comment\\\">// will exist on the instance's `this` reference</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>text<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3>React.Component#componentWillMount()</h3>\\n<p>While the <code class=\\\"language-text\\\">render</code> is the only method necessary to define, React.Component has some other life cycle methods we can define. An example is there is a method called componentWillMount, which is called when the component is about to be added to the screen. To use the hackernews app as an example, we can use this to fetch new articles when a component is added to the screen.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Message</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token comment\\\">// will execute when first added to screen</span>\\n  <span class=\\\"token function\\\">componentWillMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'hello world!'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>text<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3>React.Component#setState()</h3>\\n<p>When called, setState will take the current value of <code class=\\\"language-text\\\">this.state</code> (which will be the data store for our view), and merge it with the object you pass it, then will also re-render the component again with the new values.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Message</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token comment\\\">// lets set the initial value of `this.state`</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> text<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">''</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// sets `this.state.text` to Hello World after 3 seconds.</span>\\n  <span class=\\\"token function\\\">componentWillMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> text<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Hello World!\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// we are using state here to set `text`!!</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>text<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>The combination of these methods will be the basis for our container.</p>\\n<h2>Exercise</h2>\\n<p>The last example of message is largely similar to what the container for our hackernews app should look like. For the excercise:</p>\\n<ul>\\n<li>in <code class=\\\"language-text\\\">source/index.jsx</code> create our container class extending <code class=\\\"language-text\\\">React.Component</code>.</li>\\n<li>it should have an initial state of <code class=\\\"language-text\\\">{ articles: [] }</code></li>\\n<li>when the component mounts, it should fetch articles from hackernews***.</li>\\n<li>finally it will re-render our <code class=\\\"language-text\\\">NewsFeed</code> view with the articles currently\\nin the containers state (automatically when setState is called).</li>\\n</ul>\\n<p>*** to make this easier lets not worry about fetching our articles from the api just yet. Lets just use setTimeout to set <code class=\\\"language-text\\\">this.state.articles</code> to the mocked articles array we are already using.</p>\",\"frontmatter\":{\"date\":\"March 22, 2018\",\"path\":\"/chapters/containers\",\"title\":\"Containers\"}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/chapters-containers.json\n// module id = 334\n// module chunks = 1166681777080"],"sourceRoot":""}
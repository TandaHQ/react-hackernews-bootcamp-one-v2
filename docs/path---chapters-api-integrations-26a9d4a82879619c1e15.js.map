{"version":3,"sources":["webpack:///path---chapters-api-integrations-26a9d4a82879619c1e15.js","webpack:///./.cache/json/chapters-api-integrations.json"],"names":["webpackJsonp","332","module","exports","data","markdownRemark","html","frontmatter","date","path","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,mnTAAqyRC,aAA6rCC,KAAA,iBAAAC,KAAA,6BAAAC,MAAA,sBAAyFC","file":"path---chapters-api-integrations-26a9d4a82879619c1e15.js","sourcesContent":["webpackJsonp([64610233205356],{\n\n/***/ 332:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>API Integrations</h1>\\n<p>To improve on our container component from last chapter, we will tackle two aspects, integrating with the api, and providing alternate view states.</p>\\n<h1>Integrating With The API</h1>\\n<p>To integrate with the api, we will be using a package named <code class=\\\"language-text\\\">hacker-news-top-list</code>. The README.md of this module can be found <a href=\\\"https://yarnpkg.com/en/package/hacker-news-top-list\\\">here</a>. Lets add the dependency using <code class=\\\"language-text\\\">yarn add hacker-news-top-list</code>. We can now use this in our container's <code class=\\\"language-text\\\">componentWillMount</code> method and add the results to state with <code class=\\\"language-text\\\">setState</code>.</p>\\n<p>Lets refactor our container to make the api call.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token comment\\\">// source/index.jsx</span>\\n<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> getArticles <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'hacker-news-top-list'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> NewsFeed <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./View/NewsFeed'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Container</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> articles<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">componentWillMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// since this isnt really react specific we will</span>\\n    <span class=\\\"token comment\\\">// give you this one ðŸ˜œ</span>\\n    <span class=\\\"token function\\\">GetArticles</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>articles <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> articles <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>NewsFeed</span>\\n        <span class=\\\"token attr-name\\\">articles</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>articles<span class=\\\"token punctuation\\\">}</span></span>\\n      <span class=\\\"token punctuation\\\">/></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nReactDom<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Container</span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">,</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>There we have it. Our app now renders a list of articles from the API!</p>\\n<h1>Providing Alternate States</h1>\\n<p>Currently while our data is loading we unfortunately dont see anything, this is not a good time. We also dont have a screen to let the user no if theres a problem requesting the data. Heres a pattern we can employ to solve this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Container</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> request<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'LOADING'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">switch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>request<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'SUCCESS'</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Foo</span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'FAILURE'</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Bar</span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'LOADING'</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Baz</span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Excercise</h2>\\n<p>Lets use this pattern to provide a more robust system and better experience for the user. To do this we will need to:</p>\\n<ul>\\n<li>\\n<p>Create a <code class=\\\"language-text\\\">Loading</code> component</p>\\n</li>\\n<li>\\n<p>Create a <code class=\\\"language-text\\\">Failure</code> component</p>\\n</li>\\n<li>\\n<p>On <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\\\">promise</a> failure/success update the state of the request in state.</p>\\n<ul>\\n<li><code class=\\\"language-text\\\">this.state.request</code> should always equal one of: 'LOADING' | 'SUCCESS' | 'FAILURE'</li>\\n</ul>\\n</li>\\n<li>\\n<p>Show the correct view depending on <code class=\\\"language-text\\\">this.state.request</code>.</p>\\n</li>\\n</ul>\\n<p><strong><em>Additional Excercise</em></strong></p>\\n<ul>\\n<li>Refactor the loading component into its own component in <code class=\\\"language-text\\\">source/Component/Loading/index.jsx</code></li>\\n<li>Refactor the failure component into its own component in <code class=\\\"language-text\\\">source/Component/Failure/index.jsx</code></li>\\n<li>Make them look ðŸ’¸ ðŸ’¸ ðŸ’¸ .</li>\\n</ul>\",\"frontmatter\":{\"date\":\"March 22, 2018\",\"path\":\"/chapters/api-integrations\",\"title\":\"API Integrations\"}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---chapters-api-integrations-26a9d4a82879619c1e15.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>API Integrations</h1>\\n<p>To improve on our container component from last chapter, we will tackle two aspects, integrating with the api, and providing alternate view states.</p>\\n<h1>Integrating With The API</h1>\\n<p>To integrate with the api, we will be using a package named <code class=\\\"language-text\\\">hacker-news-top-list</code>. The README.md of this module can be found <a href=\\\"https://yarnpkg.com/en/package/hacker-news-top-list\\\">here</a>. Lets add the dependency using <code class=\\\"language-text\\\">yarn add hacker-news-top-list</code>. We can now use this in our container's <code class=\\\"language-text\\\">componentWillMount</code> method and add the results to state with <code class=\\\"language-text\\\">setState</code>.</p>\\n<p>Lets refactor our container to make the api call.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token comment\\\">// source/index.jsx</span>\\n<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> getArticles <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'hacker-news-top-list'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> NewsFeed <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./View/NewsFeed'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Container</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> articles<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">componentWillMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// since this isnt really react specific we will</span>\\n    <span class=\\\"token comment\\\">// give you this one ðŸ˜œ</span>\\n    <span class=\\\"token function\\\">GetArticles</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>articles <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> articles <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>NewsFeed</span>\\n        <span class=\\\"token attr-name\\\">articles</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>articles<span class=\\\"token punctuation\\\">}</span></span>\\n      <span class=\\\"token punctuation\\\">/></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nReactDom<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Container</span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">,</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>There we have it. Our app now renders a list of articles from the API!</p>\\n<h1>Providing Alternate States</h1>\\n<p>Currently while our data is loading we unfortunately dont see anything, this is not a good time. We also dont have a screen to let the user no if theres a problem requesting the data. Heres a pattern we can employ to solve this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Container</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> request<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'LOADING'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">switch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>request<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'SUCCESS'</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Foo</span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'FAILURE'</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Bar</span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'LOADING'</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Baz</span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Excercise</h2>\\n<p>Lets use this pattern to provide a more robust system and better experience for the user. To do this we will need to:</p>\\n<ul>\\n<li>\\n<p>Create a <code class=\\\"language-text\\\">Loading</code> component</p>\\n</li>\\n<li>\\n<p>Create a <code class=\\\"language-text\\\">Failure</code> component</p>\\n</li>\\n<li>\\n<p>On <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\\\">promise</a> failure/success update the state of the request in state.</p>\\n<ul>\\n<li><code class=\\\"language-text\\\">this.state.request</code> should always equal one of: 'LOADING' | 'SUCCESS' | 'FAILURE'</li>\\n</ul>\\n</li>\\n<li>\\n<p>Show the correct view depending on <code class=\\\"language-text\\\">this.state.request</code>.</p>\\n</li>\\n</ul>\\n<p><strong><em>Additional Excercise</em></strong></p>\\n<ul>\\n<li>Refactor the loading component into its own component in <code class=\\\"language-text\\\">source/Component/Loading/index.jsx</code></li>\\n<li>Refactor the failure component into its own component in <code class=\\\"language-text\\\">source/Component/Failure/index.jsx</code></li>\\n<li>Make them look ðŸ’¸ ðŸ’¸ ðŸ’¸ .</li>\\n</ul>\",\"frontmatter\":{\"date\":\"March 22, 2018\",\"path\":\"/chapters/api-integrations\",\"title\":\"API Integrations\"}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/chapters-api-integrations.json\n// module id = 332\n// module chunks = 64610233205356"],"sourceRoot":""}
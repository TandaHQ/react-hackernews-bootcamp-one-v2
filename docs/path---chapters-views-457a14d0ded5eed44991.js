webpackJsonp([0xd29af1475ad],{342:function(n,s){n.exports={data:{markdownRemark:{html:'<h1>Views</h1>\n<p>So far we have learned JSX, how to create a component and how to write modular components with modular styles. Now we are going to put our first view together. While a component should be versatile in usage, a view is a specific arrangement of components for a user interface.</p>\n<h1>A Simple View</h1>\n<p>Guess how we define a view in react? It\'s really just a component! We just acknowledge them differently as they serve a different purpose. To use the hackernews app as an example, our news feed is a view.</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">   Article (Component)           |         News Feed (View)\n                                 |\n                                 |         -----------------\n                                 |         |               |\n   ---------------------         |         |               |\n   |                   |         |         -----------------\n   |                   |         |         |               |\n   |                   |         |         |               |\n   |                   |         |         -----------------\n   ---------------------         |         |               |\n                                 |         |               |\n                                 |         -----------------\n                                 |</code></pre>\n      </div>\n<h2>Excercise</h2>\n<p>In our <code class="language-text">source/index.jsx</code>, let\'s try make a <code class="language-text">NewsFeed</code> view which takes the data in the snippet below and renders three <code class="language-text">Article</code> components inside a div.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// our fake articles from hackernews</span>\n<span class="token keyword">const</span> ARTICLES <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    by<span class="token punctuation">:</span> <span class="token string">\'Annie A\'</span><span class="token punctuation">,</span>\n    id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    title<span class="token punctuation">:</span> <span class="token string">\'Some Cool Techy Stuff\'</span><span class="token punctuation">,</span>\n    url<span class="token punctuation">:</span> <span class="token string">\'https://google.com\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    by<span class="token punctuation">:</span> <span class="token string">\'Diddy P\'</span><span class="token punctuation">,</span>\n    id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n    title<span class="token punctuation">:</span> <span class="token string">\'Digital Rap\'</span><span class="token punctuation">,</span>\n    urk<span class="token punctuation">:</span> <span class="token string">\'https://google.com\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    by<span class="token punctuation">:</span> <span class="token string">\'Hoolio H\'</span><span class="token punctuation">,</span>\n    id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n    title<span class="token punctuation">:</span> <span class="token string">\'Yeh Cool Keen\'</span><span class="token punctuation">,</span>\n    url<span class="token punctuation">:</span> <span class="token string">\'https://google.com\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// lets pass the values in `ARTICLES` to our `NewsFeed` like so:</span>\n<span class="token comment">//</span>\n<span class="token comment">// eg.</span>\n<span class="token comment">//   &lt;NewsFeed</span>\n<span class="token comment">//     article1={ARTICLES[0]}</span>\n<span class="token comment">//     article2={ARTICLES[1]}</span>\n<span class="token comment">//     article3={ARTICLES[2]}</span>\n<span class="token comment">//   /></span>\n<span class="token comment">//</span>\n</code></pre>\n      </div>\n<h2>A List View</h2>\n<p>Commonly in a user interface we have to represent a list of things that we may not know the length of until compute time. For example if we are trying to display all the articles from hacker news for a specific week, the list of articles may vary in length. How do we do this then? The answer lies in Array#map.</p>\n<h3>Mapping</h3>\n<p>If we have an array of values such as <code class="language-text">[1, 2, 3]</code> and wanted to double them, we can map them like so:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n\n<span class="token keyword">const</span> doubles <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>value <span class="token operator">=></span> value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>\n\n<span class="token comment">// [2, 4, 6]</span>\n</code></pre>\n      </div>\n<p>If we wanted to change there type we can still use map:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n\n<span class="token keyword">const</span> strings <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>value <span class="token operator">=></span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// [\'1\', \'2\', \'3\']</span>\n</code></pre>\n      </div>\n<p>Finally, if we wanted to make them into components:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n\n<span class="token keyword">const</span> components <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>value <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>span key<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token operator">></span>\n    <span class="token punctuation">{</span>value<span class="token punctuation">}</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// [&lt;span>1&lt;/span>, &lt;span>2&lt;/span>, &lt;span>3&lt;/span>]</span>\n</code></pre>\n      </div>\n<p>Yup thats right we can map to react elements just like they were any other value!</p>\n<h3>The Catch</h3>\n<p>You will notice in the example mapping numbers to react components, I have assigned the value to a property on the span called <code class="language-text">key</code>. Why is this?</p>\n<p>It is because when our list gets rendered time and time again, react needs to be able to tell which component are the same as last render. The key you provide should be unique to the value the component is representing. To use the hackernews feed as an example, if the component you are mapping to represents one of the articles from the api the <code class="language-text">id</code> of the article would be a good key as it is unique to the article.</p>\n<h2>Excercise</h2>\n<p>Let\'s change the definition of our <code class="language-text">NewsFeed</code> component to take an array of hackernews articles, and map them to <code class="language-text">Article</code> components, then render them inside a <code class="language-text">div</code>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token comment">// Usage should be like so:</span>\n<span class="token comment">//</span>\n<span class="token comment">//    &lt;NewsFeed</span>\n<span class="token comment">//      articles={ARTICLES}</span>\n<span class="token comment">//    /></span>\n<span class="token comment">//</span>\n</code></pre>\n      </div>\n<p><strong><em>Additional Exercise</em></strong></p>\n<p>Let\'s refactor our NewsFeed component into its own file. This file should be <code class="language-text">source/Views/NewsFeed/index.jsx</code></p>',frontmatter:{date:"March 22, 2018",path:"/chapters/views",title:"Views"}}},pathContext:{}}}});
//# sourceMappingURL=path---chapters-views-457a14d0ded5eed44991.js.map
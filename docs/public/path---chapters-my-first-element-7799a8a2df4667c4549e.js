webpackJsonp([19144311675718],{337:function(n,a){n.exports={data:{markdownRemark:{html:'<h1>My First Element</h1>\n<p>By the end of this chapter we will have implemented and rendered our first react element üëç.</p>\n<h2>Background</h2>\n<p>First things first, let\'s get familiar with the current code. There are two files of interest:</p>\n<ul>\n<li>dist/index.html</li>\n<li>source/index.js</li>\n</ul>\n<p>If we look in <code class="language-text">dist/index.html</code>, you will notice it is just an empty html page. The only thing it does do, is include one script tag. This script file that we are loading though, is where the interesting stuff happens. That script file is the compiled version of our apps source code!</p>\n<p>At this point in time our source code is completely in <code class="language-text">source/index.js</code>. If we look in that file, we will see just one function that updates the page to include the \'Hello Hacker News\' message.</p>\n<p>This is where we are going to create our first react element, and render it to the page.</p>\n<h2>Getting Started</h2>\n<p>We will need to add react and react-dom to our app if we want to use them. To add them run <code class="language-text">yarn add react react-dom</code>.</p>\n<p>Now lets import them into <code class="language-text">source/index.js</code>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token comment">// at the top of the file</span>\n<span class="token keyword">import</span> React    <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Cool. We now have the React, and ReactDOM libraries accesible to us in our module.</p>\n<h2>Creating a React Element</h2>\n<p>To create a react element, React exposes a function called createElement. An example usage would be:</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> myReactElement <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>\n  <span class="token string">\'div\'</span><span class="token punctuation">,</span>                 <span class="token comment">// this element we want to create</span>\n  <span class="token punctuation">{</span> onClick<span class="token punctuation">:</span> fizzBuzz <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// the properties we want to add to the element</span>\n  <span class="token string">\'Hey World!\'</span>           <span class="token comment">// a child element</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>To explain what the above element would look like when rendered to the page:</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token comment">&lt;!--\n  NOTE: notice how `onClick` changed to onclick. React will expect known\n  properties to be in camelCase even though html does not.\n--></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fizzBuzz<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  Hello Hacker News\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n</code></pre>\n      </div>\n<h2>Rendering An Element To The Page</h2>\n<p>To render an element to the page. ReactDOM exposes a function called render. An example usage would be:</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> myReactElement <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n  myReactElement<span class="token punctuation">,</span> <span class="token comment">// what we react element we want to render</span>\n  document<span class="token punctuation">.</span>body   <span class="token comment">// where we want to render on the page</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<blockquote>\n<p>NOTE: The above code would replace everything inside the body of the page with what our react element would render as. Its considered bad practice to render to document.body. We should add our own node to the page specifically for rendering our react application too.</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- in our dist/index.html --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- Typically we would add a \'mount\' node here and render to that --></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n</code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>myReactElement<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'App\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n</blockquote>\n<h2>Exercise</h2>\n<p>Before we move onto the next chapter lets replace the current Hello Hacker News message, with an implementation, written in react!</p>\n<p><strong><em>Additional Excersice</em></strong></p>\n<p>To get more familiar with the API for create element. Try:</p>\n<ul>\n<li>render a button to the page that opens an alert on click</li>\n<li>render an element that has another element as its child.</li>\n</ul>',frontmatter:{date:"March 22, 2018",path:"/chapters/my-first-element",title:"My First Element"}}},pathContext:{}}}});
//# sourceMappingURL=path---chapters-my-first-element-7799a8a2df4667c4549e.js.map
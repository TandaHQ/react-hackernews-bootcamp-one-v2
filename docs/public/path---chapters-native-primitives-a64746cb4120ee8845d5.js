webpackJsonp([0xe660940b2761],{338:function(n,a){n.exports={data:{markdownRemark:{html:'<h1>Native Primitives</h1>\n<p>In react native we dont have <code class="language-text">div</code> or <code class="language-text">span</code>, but we do have <code class="language-text">Text</code>, <code class="language-text">View</code> and a whole lot of other primitive components. In this chapter we will put together our NewsFeeed using some of these.</p>\n<h1>Native Lists</h1>\n<p>For this chapter it might be worth using our mocked article list again.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> ARTICLES <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    by<span class="token punctuation">:</span> <span class="token string">\'Annie A\'</span><span class="token punctuation">,</span>\n    id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    title<span class="token punctuation">:</span> <span class="token string">\'Some Cool Techy Stuff\'</span><span class="token punctuation">,</span>\n    url<span class="token punctuation">:</span> <span class="token string">\'https://google.com\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    by<span class="token punctuation">:</span> <span class="token string">\'Diddy P\'</span><span class="token punctuation">,</span>\n    id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n    title<span class="token punctuation">:</span> <span class="token string">\'Digital Rap\'</span><span class="token punctuation">,</span>\n    urk<span class="token punctuation">:</span> <span class="token string">\'https://google.com\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    by<span class="token punctuation">:</span> <span class="token string">\'Hoolio H\'</span><span class="token punctuation">,</span>\n    id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n    title<span class="token punctuation">:</span> <span class="token string">\'Yeh Cool Keen\'</span><span class="token punctuation">,</span>\n    url<span class="token punctuation">:</span> <span class="token string">\'https://google.com\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>And to implement the list instead of just mapping our data to our <code class="language-text">Article</code> components, we will use a react native component called <code class="language-text">FlatList</code>. Docs are <a href="https://facebook.github.io/react-native/docs/flatlist.html">here</a>.</p>\n<h2>Why Use Flat List</h2>\n<p>When we map our list to <code class="language-text">Article</code> components the normal way is to add them all to the parent view. This is not ideal when we have a large list. It can make react become quite slow. A way around this is to render only the part of the list the user wants to see. This is the job of <code class="language-text">FlatList</code>. we can use this to better manage our list of views and render only the on screen stuff.</p>\n<h2>Flat List Example</h2>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">SomeList</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>PureComponent</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">renderItem</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> item <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>MyListItem\n      key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span>\n    <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>FlatList\n        data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>data<span class="token punctuation">}</span>\n        renderItem<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>renderItem<span class="token punctuation">}</span>\n      <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>In the example above the array of data we want to map is what we pass to our <code class="language-text">FlatList</code> component. and the <code class="language-text">renderItem</code> prop is where we pass the function we normally would pass to map. With the slight difference that our function should expect an object containing the data on the member <code class="language-text">item</code>.</p>\n<h2>Excercise</h2>\n<p>Lets build our <code class="language-text">NewsFeed</code> component with a <code class="language-text">FlatList</code> implementation. and render it from <code class="language-text">App</code>.</p>\n<p><strong><em>Additional Excercise</em></strong></p>\n<p>Refactor <code class="language-text">NewsFeed</code> into <code class="language-text">Views/NewsFeed/index.js</code>.</p>',frontmatter:{date:"March 22, 2018",path:"/chapters/native-primitives",title:"Native Primitives"}}},pathContext:{}}}});
//# sourceMappingURL=path---chapters-native-primitives-a64746cb4120ee8845d5.js.map